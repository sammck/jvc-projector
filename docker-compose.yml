version: "3.3"

# docker-compose.yml configuration for a simple HTTP service container
# that sits behind traefik running in a tp_hub environment and provides
# a REST API for control of a JVC projector on the local LAN.
#
# See https://github.com/sammck/tp-hub for more information about tp_hub.
#
#  Environment Variables:
#    PARENT_DNS_DOMAIN          A registered public DNS domain that you control; e.g., "obama-family-home.com".
#                               If launched by Portainer on tp_hub, this variable is provided by Portainer's own
#                               environment, and does not need to be added to launch environment variables.
#
#    DEFAULT_CERT_RESOLVER      The default certificate resolver to use for all stacks.
#                               "prod" uses real lets-encrypt certificates, "staging" uses staging lets-encrypt.
#                               If launched by Portainer on tp_hub, this variable is provided by Portainer's own
#                               environment, and does not need to be added to launch environment variables.
#
#    CERT_RESOLVER              The certificate resolver to use for ${SUBDOMAIN}.${PARENT_DNS_DOMAIN}.
#                               "prod" uses real lets-encrypt certificates, "staging" uses staging lets-encrypt
#                               If ommitted, ${DEFAULT_CERT_RESOLVER} is used.
#
#    SUBDOMAIN                  The path prefix used for simple HTTP requests  defaults to jvc-projector
#
#    JVC_PROJECTOR_HOST         The hostname or IP address of the JVC projector. Required, because SDDP
#                               will not work behind docker NAT.
#
#    JVC_PROJECTOR_PASSWORD     The password used to authenticate requests to the JVC projector.
#                               If ommitted, no authentication is required.
#
# This stack serves:
#
#    http://<any-hostname>/${SUBDOMAIN:-jvc-projector}           (private LAN only)
#
# Prerequisites:
#   Prerequisites common to all stacks (only done once when traefik is initially set up):
#     * A DNS entry with a stable name (e.g., ddns.${PARENT_DNS_DOMAIN}) has been configured to resolve to the current public IP address
#       of your network's gateway router. Since typical residential ISPs may change your public IP address periodically, it is
#       usually necessary to involve Dynamic DNS (DDNS) to make this work. Some gateway routers (e.g., eero) have DDNS support built-in.
#       Your DDNS provider will provide you with an obscure but unique and stable (as long as you stay with the DDNS provider)
#       DNS name for your gateway's public IP address; e.g., "g1234567.eero.online". You should then create a CNAME entry for
#       ddns.${PARENT_DNS_DOMAIN} that points at the obscure DDNS name. That makes an easy-to-remember DNS name for your network's public IP
#       address, and ensures that if your DDNS obscure name ever changes, you will only have to update this one CNAME record
#       to be back in business.
#     * Your network's gateway router must be configured to forward public ports 80 and 443 to traefik on alternate destination ports
#       (e.g., 80->7080, 443->7443). Alternate ports are required because ports 80 and 443 are used to serve lan-local (non-internet)
#       requests and must not be exposed to the internet.
#     * traefik should be configured with entrypoints as follows:
#            web            HTTP requests coming in from the public internet through <your-network-public-ip-address>:80
#            websecure      HTTPS requests coming in from the public internet through <your-network-public-ip-address>:443
#            lanweb         HTTP reguests coming in from the intranet through <this-host-lan-ip>:80. Not reachable from internet.
#            lanwebsecure   HTTPS reguests coming in from the intranet through <this-host-lan-ip>:443. Not reachable from internet.
#     * traefik should be configured to proxy requests to backend service containers through docker network "traefik"
#
#  Special prerequisites for this stack.
#     * A DNS CNAME entry has been created for ${SUBDOMAIN:-jvc-projector}.${PARENT_DNS_DOMAIN} that resolves to ddns.${PARENT_DNS_DOMAIN} (see above).
#       You must create a DNS entry for ${SUBDOMAIN:-jvc-projector}.${PARENT_DNS_DOMAIN} that resolves to your gateway router's public IP address
#       *before* starting this stack. If you do not, lets-encrypt will be unable to validate the certificate request,
#       and will eventually throttle you for a week at a time.
services:
  jvc-projector:
    image: "sammck/jvc-projector"
    build: .

    environment:
      - "JVC_PROJECTOR_PASSWORD=${JVC_PROJECTOR_PASSWORD:-}"
      - "JVC_PROJECTOR_HOST=${JVC_PROJECTOR_HOST:-}"

    ports: []
      # - "8099:80"             # Expose the service on port 80 to the host on port 8099, for testing purposes only

    networks:
      - traefik                # The network through which traefik forwards requests to our service

    restart: always            # This container will be restarted when this host reboots or docker is restarted

    labels:
      - "traefik.enable=true"   # tells traefik that this container should be reverse-proxied

      # -----------------------------------------
      # A router for http://<any-hostname>/${SUBDOMAIN:-jvc-projector}, on the local LAN entrypoint only
      - "traefik.http.routers.${SUBDOMAIN:-jvc-projector}-http-private-path.entrypoints=lanweb"
      - "traefik.http.routers.${SUBDOMAIN:-jvc-projector}-http-private-path.rule=PathPrefix(`/${SUBDOMAIN:-jvc-projector}`)"
      # Following middleware will strip off the /${SUBDOMAIN:-jvc-projector} prefix before forwarding to the whoami service
      - "traefik.http.middlewares.${SUBDOMAIN:-jvc-projector}-http-private-path-prefix.stripPrefix.prefixes=/${SUBDOMAIN:-jvc-projector}"
      # use middlewares
      - "traefik.http.routers.${SUBDOMAIN:-jvc-projector}-http-private-path.middlewares=${SUBDOMAIN:-jvc-projector}-http-private-path-prefix"
      # -----------------------------------------

networks:

  # The backend docker network used for traefik reverse-proxy request forwarding. All containers
  # that provide HTTP services behind the traefik reverse-proxy should be placed in
  # this network. traefik will route to the service on its exposed port, if there is exactly one, or port
  # 80 by default.  This can be overridden with:
  #
  #    traefik.http.services.<service-name>.loadbalancer.server.port=<custom-port>
  #
  # It is not necessary for containers behind the reverse-proxy to expose their HTTP port to the host.
  traefik:
    external: true
